{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","numbers","time","_this2","now","Date","interval","setInterval","setState","nextNum","concat","toConsumableArray","Math","floor","random","clearInterval","react_default","a","createElement","href","aria-atomic","aria-live","aria-relevant","map","listValue","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAEqBA,cAEnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,QAAS,CAAC,GACVC,KAAM,GALST,mFASC,IAAAU,EAAAP,KACZQ,EAAMC,KAAKD,MACjBR,KAAKU,SAAWC,YAAY,kBAAMJ,EAAKK,SAAS,CAAEN,KAAMG,KAAKD,MAAQA,KAAQ,MAC7ER,KAAKa,QAAUF,YAAY,kBAAMJ,EAAKK,SAAS,CAAEP,QAAO,GAAAS,OAAAhB,OAAAiB,EAAA,EAAAjB,CAAMS,EAAKH,MAAMC,SAAjB,CAA0BW,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,WAAU,sDAIlIE,cAAcnB,KAAKU,UACnBS,cAAcnB,KAAKa,0CAGnB,OACEO,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gDACAF,EAAAC,EAAAC,cAAA,6GAAoGF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,iEAAR,uBAApG,MAEFH,EAAAC,EAAAC,cAAA,MACEE,cAAY,QACZC,YAAU,SACVC,gBAAc,kBAEZ1B,KAAKI,MAAMC,QAAQsB,IAAK,SAAAC,GACxB,OAAOR,EAAAC,EAAAC,cAAA,UAAMM,KAGfR,EAAAC,EAAAC,cAAA,UAIGtB,KAAKI,MAAME,eAzCSuB,IAAMC,WCUnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a6ed9796.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      numbers: [1],\n      time: 0\n    };\n  }\n\n  componentDidMount() {\n    const now = Date.now();\n    this.interval = setInterval(() => this.setState({ time: Date.now() - now }), 6007);\n    this.nextNum = setInterval(() => this.setState({ numbers: [...this.state.numbers, Math.floor(Math.random() * Math.floor(100))]}), 14007);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    clearInterval(this.nextNum);\n  }\n  render() {\n    return (\n      <main>\n        <div>\n          <h2>What on earth is this project for?</h2>\n          <p>This is just a simple test of `aria-live` features across browsers. For more information see the <a href=\"https://github.com/microsoft/BotFramework-WebChat/issues/1876\">Web Chat a11y issue</a>.</p>\n        </div>\n        <ul\n          aria-atomic=\"false\"\n          aria-live=\"polite\"\n          aria-relevant=\"additions text\"\n        >\n          { this.state.numbers.map( listValue => {\n            return <li>{ listValue }</li>\n          })\n          }\n          <li\n            // aria-atomic=\"true\"\n            // aria-live=\"polite\"\n            // aria-relevant=\"text\"\n          >{ this.state.time }</li>\n        </ul>\n      </main>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}